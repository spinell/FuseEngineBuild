# This is a basic workflow to help you get started with Actions

name: Build-Branch


# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  linux:
    name: ${{ matrix.os }}-${{ matrix.compiler.cc }}-${{ matrix.compiler.version }}-${{ matrix.buildConfig }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # if one job in the matrix fail, don't cancel other jobs inthe matrix
      matrix:
         # https://github.com/actions/virtual-environments/tree/main/images/linux
        os: [ ubuntu-24.04]
        buildConfig: [Debug, Release, RelWithDebInfo]
        compiler:
          #- { cc: gcc, cxx: g++, version: 12} GCC 12 does not support std::format
          - { cc: gcc, cxx: g++, version: 13}
          - { cc: gcc, cxx: g++, version: 14}
          #- { cc: clang, cxx: clang++, version: 16 } build fail
          - { cc: clang, cxx: clang++, version: 17 }
          - { cc: clang, cxx: clang++, version: 18 }
    env:
        BUILD_DIR: "build/${{matrix.compiler.cc}}-${{matrix.compiler.version}}${{matrix.compiler.buildConfig}}"
        INSTALL_DIR: "install/${{matrix.compiler.cc}}-${{matrix.compiler.version}}${{matrix.compiler.buildConfig}}"
    steps:
      - name: Checkout FuseEngine
        uses: actions/checkout@v4
        with:
          repository: spinell/FuseEngine
          ref: dev
          token: ${{ secrets.PAT }}
          submodules: recursive
      # Runs a set of commands using the runners shell
      - name: CMake Configure
        env:
          CC: "${{ matrix.compiler.cc }}-${{ matrix.compiler.version }}"
          CXX: "${{ matrix.compiler.cxx }}-${{ matrix.compiler.version }}"
        run: |
          cmake --preset gcc-14-debug \
             -B ${{env.BUILD_DIR}} \
            -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake \
            -DCMAKE_BUILD_TYPE=${{matrix.buildConfig}} \
            -DCMAKE_C_COMPILER=${{env.CC}} \
            -DCMAKE_CXX_COMPILER=${{env.CXX}}

      - name: Build Debug
        run: cmake --build ${{env.BUILD_DIR}}

      - name: Run test
        run: ctest --test-dir ${{env.BUILD_DIR}} --rerun-failed --output-on-failure

      - name: Install Debug
        run: cmake --install ${{env.BUILD_DIR}}  --prefix ${{env.INSTALL_DIR}}

      - uses: actions/upload-artifact@v4
        with:
          name: install-ubuntu-${{ matrix.compiler.cc }}-${{ matrix.compiler.version }}-${{matrix.buildConfig}}
          path: ${{env.INSTALL_DIR}}

  windows:
    name: Windows-2022-${{ matrix.buildConfig }}
    runs-on: Windows-2022
    strategy:
      matrix:
        buildConfig: [Debug, RelWithDebInfo, Release]
    env:
        BUILD_DIR: "build/ninja-multi-config"
        INSTALL_DIR: "install/ninja-multi-config"

    steps:
      # Clone the repo
      - name: Checkout FuseEngine
        uses: actions/checkout@v4
        with:
          repository: spinell/FuseEngine
          ref: dev
          token: ${{ secrets.PAT }}
          submodules: recursive

      # Install ninja
      - uses: seanmiddleditch/gha-setup-ninja@master
      - run : ninja --version

      # setup MSVC shell
      - name: Set Visual Studio Architecture
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      # Runs a set of commands using the runners shell
      - name: Running cmake configure ...
        run: cmake --preset ninja-multi-config -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_COMPILE_WARNING_AS_ERROR=OFF

      - name: Running cmake build ...
        run: cmake --build ${{env.BUILD_DIR}} --config ${{ matrix.buildConfig }}

      - name: Running tests ...
        run: ctest --test-dir ${{env.BUILD_DIR}} --build-config ${{ matrix.buildConfig }} --rerun-failed --output-on-failure

      - name: Running cmake install ...
        run: cmake --install ${{env.BUILD_DIR}}  --prefix ${{env.INSTALL_DIR}} --config ${{ matrix.buildConfig }}

      - uses: actions/upload-artifact@v4
        with:
          name: install-windows-${{ matrix.buildConfig }}
          path: ${{env.INSTALL_DIR}}

  osx:
    name: ${{ matrix.os }}-${{ matrix.compiler.cc }}-${{ matrix.compiler.version }}-${{ matrix.buildConfig }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # if one job in the matrix fail, don't cancel other jobs inthe matrix
      matrix:
        os: [ macos-13, macos-14, macos-15 ]
        buildConfig: [Debug, RelWithDebInfo, Release]
        compiler:
          - { cc: clang, cxx: clang++, version: 14} # 14.0.0
          - { cc: clang, cxx: clang++, version: 15} # 15.0.7
          - { cc: clang, cxx: clang++, version: 18} # 18.1.8
          - { cc: gcc,   cxx: g++,     version: 14} # 18.1.8
        exclude:
            - os : macos-13
              compiler: { cc: clang, cxx: clang++, version: 14 } # AppleClang 15.0.0.15000100 /usr/bin/clang++
            - os : macos-13
              compiler: { cc: clang, cxx: clang++, version: 15 } # Clang 15.0.7 /usr/local/opt/llvm@15/bin/clang
            - os : macos-13
              compiler: { cc: clang, cxx: clang++, version: 18 }
            - os : macos-14
              compiler: { cc: clang, cxx: clang++, version: 14 }
            - os : macos-14
              compiler: { cc: clang, cxx: clang++, version: 15 } # Clang 15.0.7 /opt/homebrew/opt/llvm@15/bin/clang
            - os : macos-14
              compiler: { cc: clang, cxx: clang++, version: 18 }
            - os : macos-15
              compiler: { cc: clang, cxx: clang++, version: 14 }
    env:
      BUILD_DIR: "build/${{matrix.compiler.cc}}-${{matrix.compiler.version}}${{matrix.compiler.buildConfig}}"
      INSTALL_DIR: "install/${{matrix.compiler.cc}}-${{matrix.compiler.version}}${{matrix.compiler.buildConfig}}"

    steps:
      - run: clang          --version
      - run: /usr/bin/clang --version
      - run: gcc            --version
      - run: /usr/bin/gcc   --version
      - run: ls -la /usr/bin/gcc
      - run: ls -la /usr/bin/clang
      - run: ls -la /usr/local/opt/ || echo ""
      - run: ls -la /usr/local/opt/ || echo ""
      - run: echo $PATH
      - run: which vcpkg
      - run: echo "$(brew --prefix llvm)/bin/clang"
      - run: echo "$(brew --prefix llvm@15)/bin/clang"
      - run: echo "$(brew --prefix llvm@18)/bin/"

      # Clone the repo
      - name: Checkout FuseEngine
        uses: actions/checkout@v4
        with:
          repository: spinell/FuseEngine
          ref: dev
          token: ${{ secrets.PAT }}
          submodules: recursive

      - name: CMake Configure
        run: |
          # Try to find clang path
          if [[ ${{ matrix.compiler.cc }} == "clang" ]];
          then
            if [[ ${{ matrix.os }} == "macos-15" && ${{matrix.compiler.version }} == "18" ]];
            then
              CC=$(brew --prefix llvm@${{matrix.compiler.version}})/bin/clang
              CXX=$(brew --prefix llvm@${{matrix.compiler.version}})/bin/clang++
            elif [[ ${{ matrix.os }} == "macos-14" && ${{matrix.compiler.version }} == "15" ]];
            then
              CC=$(brew --prefix llvm@${{matrix.compiler.version}})/bin/clang
              CXX=$(brew --prefix llvm@${{matrix.compiler.version}})/bin/clang++
            elif [[ ${{ matrix.os }} == "macos-13" && ${{matrix.compiler.version }} == "15" ]];
            then
              CC=$(brew --prefix llvm@${{matrix.compiler.version }})/bin/clang
              CXX=$(brew --prefix llvm@${{matrix.compiler.version }})/bin/clang++
            else
              CC=/usr/bin/clang
              CXX=/usr/bin/clang++
            fi
            else
              CC=${{matrix.compiler.cc }}-${{matrix.compiler.version }}
              CXX=${{matrix.compiler.cxx }}-${{matrix.compiler.version }}
          fi

          cmake --preset osx \
          -B ${{env.BUILD_DIR}} \
          -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake \
          -DCMAKE_BUILD_TYPE=${{matrix.buildConfig}} \
          -DCMAKE_C_COMPILER=$CC \
          -DCMAKE_CXX_COMPILER=$CXX

      - name: Running cmake build ...
        run: cmake --build ${{env.BUILD_DIR}} --config ${{ matrix.buildConfig }}

      - name: Running tests ...
        run: ctest --test-dir ${{env.BUILD_DIR}} --build-config ${{ matrix.buildConfig }} --rerun-failed --output-on-failure

      - name: Running cmake install ...
        run: cmake --install ${{env.BUILD_DIR}}  --prefix ${{env.INSTALL_DIR}} --config ${{ matrix.buildConfig }}

      - uses: actions/upload-artifact@v4
        with:
          name: install-${{ matrix.os }}-${{ matrix.compiler.cc }}-${{ matrix.compiler.version }}-${{ matrix.buildConfig }}
          path: ${{env.INSTALL_DIR}}
