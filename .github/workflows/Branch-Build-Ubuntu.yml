################################################################################
#
# TODO: vcpkg caching
# TODO: upload artifact
# TODO: test summary
# TODO: Parse cmake         error/warning
# TODO: Parse GCC           error/warning
# TODO: Parse Clang/ClangCL error/warning
# TODO: cancel running job
#
#################################################################################
name: Branch Build Ubuntu
description: Build on ubuntu
run-name: Branch Build Ubuntu (${{github.event.inputs.configType}})


on:
  workflow_dispatch :
    inputs:
       configType:
         description: 'The build configuration'
         required: true
         type: choice
         options:
           - debug
           - relwithdebinfo
           - release
         default: release
       cppStandard:
         description: 'The C++ standard to use'
         type: choice
         options:
           - 20
           - 23
         default: '20'
       warningsAsErrors:
         description: 'Build with warnings as errors'
         required: true
         type: 'boolean'
         default: false
       vcpkg:
         description: 'How to setup vcpkg'
         type: choice
         options:
           - runVcpkg
           - none
         default: none

jobs:
  build:
    name: build-${{github.event.inputs.configType}}
    runs-on: ubuntu-24.04
    env:
        BUILD_DIR: "build/${{github.event.inputs.configType}}"
        INSTALL_DIR: "install/${{github.event.inputs.configType}}"

    steps:
      - name: Dump Init state
        run: |
            echo "Workind directory : $(pwd)"
            echo "Home              : $HOME"
            echo "cmake path        : $(which cmake)"
            echo "cmake version     : $(cmake --version)"
            echo "cmake path        : $(which cmake)"
            echo "cmake version     : $(cmake --version)"
            echo "gcc path          : $(which gcc)"
            echo "gcc version       : $(gcc --version)"
            echo "clang path        : $(which clang)"
            echo "clang version     : $(clang --version)"

      - name: Dump GitGub context
        run: echo "${{ toJson(github) }}"

      - name: Dump runner
        run: echo "${{ toJson(runner) }}"

      #
      # Clone the repo
      #
      - name: Checkout FuseEngine
        uses: actions/checkout@v4
        with:
          repository: spinell/FuseEngine
          ref: dev
          token: ${{ secrets.PAT }}
          submodules: recursive

      #
      #  Run the pre installed vcpkg
      #
      - name: Run vcpkg
        run:  vcpkg  install --no-print-usage --x-feature=build-tests --x-install-root=vcpkg_installed
        if: ${{ inputs.vcpkg == 'none' }}

      #
      #  Run vcpkg run-vcpkg
      #  - This will download vcpkg in ${{ github.workspace }}/vcpkg_ if not already there.
      #    and use the baseline from vcpkg.json to sync at theright commit.
      #
      - name: run-vcpk
        uses: lukka/run-vcpkg@v11
        env:
          VCPKG_INSTALLED_DIR: vcpkg_installed
        with:
          vcpkgDirectory: '/usr/local/share/vcpkg'
          runVcpkgInstall: true
          doNotUpdateVcpkg: true
          doNotCache: true # this is broken ? Failed to save: reserveCache failed: Cache service responded with 503
          runVcpkgFormatString: '[`install`, `--x-feature=build-tests`, `--recurse`, `--clean-after-build`, `--x-install-root`, `$[env.VCPKG_INSTALLED_DIR]`, `--triplet`, `$[env.VCPKG_DEFAULT_TRIPLET]`]'
        if: ${{ inputs.vcpkg == 'runVcpkg' }}

      #
      # cmake configure
      #
      # Override the preset build directory with -B
      # This is because we are not using preset for build/test.
      #
      - name: Run CMake Configure
        run: |
          export VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT
          cmake -B ${{env.BUILD_DIR}} \
            --preset x64-linux-gcc14-${{github.event.inputs.configType}} \
            -DVCPKG_MANIFEST_INSTALL=OFF  \
            -DVCPKG_INSTALLED_DIR=vcpkg_installed \
            -DCMAKE_CXX_STANDARD=${{ github.event.inputs.cppStandard }} \
            -DCMAKE_COMPILE_WARNING_AS_ERROR=${{ github.event.inputs.warningsAsErrors }}

      #
      # build
      #
      - name: Build
        run: cmake --build ${{env.BUILD_DIR}}

      #
      # run test
      #
      - name: Run test
        run: ctest --test-dir ${{env.BUILD_DIR}} --rerun-failed --output-on-failure

      #
      # run cmake install
      #
      - name: Install
        run: cmake --install ${{env.BUILD_DIR}} --prefix ${{env.INSTALL_DIR}}
