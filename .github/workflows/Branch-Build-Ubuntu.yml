################################################################################
#
# TODO: vcpkg caching
# TODO: upload artifact
# TODO: test summary
#   cmake test that are disabled are not display
#   ctest does not display gtest output  (xml system-out)
# TODO: Parse cmake         error/warning
# TODO: Parse GCC           error/warning
# TODO: Parse Clang/ClangCL error/warning
# TODO: cancel running job
#
#################################################################################
name: Branch Build Ubuntu
description: Build on ubuntu
run-name: Branch Build Ubuntu (${{github.event.inputs.configType}})


on:
  workflow_dispatch :
    inputs:
       configType:
         description: 'The build configuration'
         required: true
         type: choice
         options:
           - debug
           - relwithdebinfo
           - release
         default: release
       cppStandard:
         description: 'The C++ standard to use'
         type: choice
         options:
           - 20
           - 23
         default: '20'
       warningsAsErrors:
         description: 'Build with warnings as errors'
         required: true
         type: 'boolean'
         default: false
       vcpkg:
         description: 'How to setup vcpkg'
         type: choice
         options:
           - runVcpkg
           - none
         default: none

jobs:
  build:
    name: build-${{github.event.inputs.configType}}
    runs-on: ubuntu-24.04
    env:
        BUILD_DIR: "build/${{github.event.inputs.configType}}"
        INSTALL_DIR: "install/${{github.event.inputs.configType}}"

    steps:
      - name: Dump Init state
        run: |
            echo "Workind directory : $(pwd)"
            echo "Home              : $HOME"
            echo "cmake path        : $(which cmake)"
            echo "cmake version     : $(cmake --version)"
            echo "cmake path        : $(which cmake)"
            echo "cmake version     : $(cmake --version)"
            echo "gcc path          : $(which gcc)"
            echo "gcc version       : $(gcc --version)"
            echo "clang path        : $(which clang)"
            echo "clang version     : $(clang --version)"
            echo "npm   path        : $(which npm)"
            echo "npm   version     : $(npm --version)"
            echo "npx   path        : $(which npx )"
            echo "npx   version     : $(npx  --version)"

      - name: Dump GitGub context
        run: echo "${{ toJson(github) }}"

      - name: Dump runner
        run: echo "${{ toJson(runner) }}"

      #
      # Clone the repo
      #
      - name: Checkout FuseEngine
        uses: actions/checkout@v4
        with:
          repository: spinell/FuseEngine
          ref: dev
          token: ${{ secrets.PAT }}
          submodules: recursive

      #
      #  Run the pre installed vcpkg
      #
      - name: Run vcpkg
        run:  vcpkg  install --no-print-usage --x-feature=build-tests --x-install-root=vcpkg_installed
        if: ${{ inputs.vcpkg == 'none' }}

      #
      #  Run vcpkg run-vcpkg
      #  - This will download vcpkg in ${{ github.workspace }}/vcpkg_ if not already there.
      #    and use the baseline from vcpkg.json to sync at theright commit.
      #
      - name: run-vcpk
        uses: lukka/run-vcpkg@v11
        env:
          VCPKG_INSTALLED_DIR: vcpkg_installed
        with:
          vcpkgDirectory: '/usr/local/share/vcpkg'
          runVcpkgInstall: true
          doNotUpdateVcpkg: true
          doNotCache: true # this is broken ? Failed to save: reserveCache failed: Cache service responded with 503
          runVcpkgFormatString: '[`install`, `--x-feature=build-tests`, `--recurse`, `--clean-after-build`, `--x-install-root`, `$[env.VCPKG_INSTALLED_DIR]`, `--triplet`, `$[env.VCPKG_DEFAULT_TRIPLET]`]'
        if: ${{ inputs.vcpkg == 'runVcpkg' }}

      #
      # cmake configure
      #
      # Override the preset build directory with -B
      # This is because we are not using preset for build/test.
      #
      - name: Run CMake Configure
        run: |
          export VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT
          cmake -B ${{env.BUILD_DIR}} \
            --preset x64-linux-gcc14-${{github.event.inputs.configType}} \
            -DVCPKG_MANIFEST_INSTALL=OFF  \
            -DVCPKG_INSTALLED_DIR=vcpkg_installed \
            -DCMAKE_CXX_STANDARD=${{ github.event.inputs.cppStandard }} \
            -DCMAKE_COMPILE_WARNING_AS_ERROR=${{ github.event.inputs.warningsAsErrors }}

      #
      # build
      #
      - uses: ammaraskar/gcc-problem-matcher@master
      - name: Build
        run: cmake --build ${{env.BUILD_DIR}}

      #
      # run ctest and ouput the result into a JUnit format file (xml).
      #
      - name: Run test
        working-directory: ${{env.BUILD_DIR}}
        run: |
         ctest \
          --rerun-failed  \
          --output-on-failure  \
          --progress \
          --output-junit ctest-test-Summary.xml

      - name: Generate ctrf report (ctest)
        run: |
          npx junit-to-ctrf ${{env.BUILD_DIR}}/ctest-test-Summary.xml -o ctrf/ctest-test-summary.json
          cat ctrf/ctest-test-summary.json
        if: always()

      - name: Publish Test Report (ctest)
        uses: ctrf-io/github-test-reporter@v1
        with:
          report-path: './ctrf/*.json'
        if: always()

      - name: Generate ctrf report (GTest)
        run: |
          ls -la ${{env.BUILD_DIR}}/tests/result
          npx junit-to-ctrf ${{env.BUILD_DIR}}/tests/result/**/*.xml -o ctrf/gtest-test-summary.json
          cat ctrf/gtest-test-summary.json
        if: always()

      - name: Publish Test Report (GTest)
        uses: ctrf-io/github-test-reporter@v1
        with:
          report-path: './ctrf/gtest-test-summary.json'
        if: always()

      #
      # Create a test summary that will be ouputed the workflow summary.
      # This step always run even if the previous step fail.
      # This way, we can display test failling in the summary.
      #
      - name: Create test summary Markdown (GTest)
        uses: test-summary/action@v2.4
        with:
          paths: ${{env.BUILD_DIR}}/tests/result/*.xml
          output:  ${{env.BUILD_DIR}}/gtest-test-Summary.md
          show: "all"
        if: always()

      - name: Create test summary Markdown (CTest)
        uses: test-summary/action@v2.4
        with:
          paths: ${{env.BUILD_DIR}}/ctest-test-Summary.xml
          output:  ${{env.BUILD_DIR}}/ctest-test-Summary.md
          show: "all"
        if: always()

      #
      # Add the test result markdown file generatedin the previous step into the
      # job summary
      #
      - name:  Adding tests result to the job summary
        run: |
            echo "==================== ctest ======================="
            cat ${{env.BUILD_DIR}}/ctest-test-Summary.md
            echo "==================== gtest ======================="
            cat ${{env.BUILD_DIR}}/gtest-test-Summary.md

            echo "### Tests result (GTest):" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cat  "${{env.BUILD_DIR}}/gtest-test-Summary.md" >> $GITHUB_STEP_SUMMARY

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            echo "### Tests result (CTest):" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cat "${{env.BUILD_DIR}}/ctest-test-Summary.md" >> $GITHUB_STEP_SUMMARY
        if: always()

      #
      # run cmake install
      #
      - name: Install
        run: cmake --install ${{env.BUILD_DIR}} --prefix ${{env.INSTALL_DIR}}
